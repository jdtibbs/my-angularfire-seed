{
   "rules": {
      // block all operations if node is not defined...this is the default!
      // ".read": false,
      // ".write": false,
      "syncedValue": {
         ".read": true,
         ".write": true,
         ".validate": "newData.isString() && newData.val().length <= 100"
      },
      "inventory": {
        ".read": true,
        // user must be valid user and logged in.
        ".write": "root.child('users/' + auth.uid).exists()",
        "$item":{          
          ".validate": "newData.hasChildren(['name', 'quantity'])",
          "name":{
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
          },
          "quantity":{
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 999"
          },
          // no other children allowed
          "$other": { ".validate": false }    
        }
      },
      "contacts": {
        ".read": true,  
          ".write": true,
          "$contact":{
            // the object to write must have these children.
            ".validate": "newData.hasChildren(['name', 'belongsTo'])",
            // user must be valid user, logged in and match the user that created.
            // see: https://www.firebase.com/docs/security/api/rule/data.html
            // this is an anti-pattern.  Use .validate instead.
            //".write": "root.child('users/' + auth.uid).exists()  && newData.child('belongsTo').val() == auth.uid"
            "belongsTo":{
              ".validate": "root.child('users/' + auth.uid).exists()  && newData.val() == auth.uid"
            },
            "name":{
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            // no other children allowed
            "$other": { ".validate": false }          
          }
      },
      "messages": {
         ".read": true,
         "$message": {
            ".write": true,
            ".validate": "newData.hasChildren(['text'])",
            "text": {
               ".validate": "newData.isString() && newData.val().length <= 10"
            },
            // no other children allowed
            "$other": { ".validate": false }      
         }
      },
      "users": {        
         "$user": {
            ".read": "auth.uid === $user",
            ".write": "auth.uid === $user && (!newData.exists() || newData.hasChildren())",
            ".validate": "newData.hasChildren(['name', 'businessPhone', 'email'])",
            "name": {
               ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "businessPhone": {
               ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "email": {
               ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            // no other children allowed
            "$other": { ".validate": false }      
         }
      }
   }
}